# Generated by Django 4.1.1 on 2023-01-29 14:10

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("users", "0003_policyholderrelative"),
        ("policies", "0002_policy_policy_holder"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Bank",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                ("branch_code", models.TextField(blank=True)),
                ("branch_name", models.TextField(blank=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BankStatement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "uploaded_file",
                    models.FileField(null=True, upload_to="bank_statements/"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[("mapped", "Mapped"), ("unmapped", "Unmapped")],
                        default="unmapped",
                        max_length=128,
                    ),
                ),
                (
                    "statement_type",
                    models.CharField(
                        choices=[
                            ("receipt", "Receipt"),
                            ("bank_statement", "Bank Statement"),
                        ],
                        default="bank_statement",
                        max_length=255,
                    ),
                ),
                ("description", models.JSONField(null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PolicyPayment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "premium",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(limit_value=0)
                        ]
                    ),
                ),
                (
                    "vat",
                    models.FloatField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(limit_value=0)
                        ],
                    ),
                ),
                ("state", models.CharField(default="NEW", max_length=255)),
                ("reference", models.CharField(max_length=255, null=True, unique=True)),
                ("payment_path", models.CharField(max_length=255, null=True)),
                (
                    "payment_method",
                    models.CharField(
                        choices=[
                            ("cash", "Cash"),
                            ("debit_order", "Debit Order"),
                            ("stop_order", "Stop Order"),
                            ("manual", "Manual"),
                            ("off_platform", "Off Platform"),
                            ("payu", "Payu"),
                            ("paygate", "Pay Gate"),
                        ],
                        default="Debit Order",
                        max_length=32,
                    ),
                ),
                ("payment_due_date", models.DateField(null=True)),
                ("payment_date", models.DateField(null=True)),
                ("extra_premium", models.FloatField(default=0)),
                (
                    "proof_of_payment",
                    models.FileField(null=True, upload_to="proof_of_payments/"),
                ),
                ("premium_reference", models.CharField(max_length=2, null=True)),
                (
                    "bank_statement",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.bankstatement",
                    ),
                ),
                (
                    "membership",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.membership",
                    ),
                ),
                (
                    "policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="policies.policy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PolicyPremium",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("balance", models.FloatField()),
                ("expected_payment", models.FloatField()),
                ("expected_date", models.DateField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("unpaid", "UnPaid"),
                            ("paid", "Paid"),
                            ("partial", "Partial"),
                            ("future", "Future"),
                            ("pending", "Pending"),
                        ],
                        default="future",
                        max_length=32,
                    ),
                ),
                ("detailed_balance", models.JSONField(default=list)),
                ("payments_details", models.JSONField(default=list)),
                ("reference", models.CharField(max_length=100, null=True)),
                ("retry_on_date", models.DateField(null=True)),
                (
                    "retry_status",
                    models.CharField(
                        choices=[
                            ("error", "Error"),
                            ("failed", "Failed"),
                            ("pending", "Pending"),
                            ("success", "Success"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        max_length=32,
                    ),
                ),
                (
                    "bank_statement",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="payments.bankstatement",
                    ),
                ),
                (
                    "membership",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.membership",
                    ),
                ),
                (
                    "payments",
                    models.ManyToManyField(
                        related_name="premiums", to="payments.policypayment"
                    ),
                ),
                (
                    "policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="policies.policy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DebitOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                ("branch_code", models.CharField(max_length=64)),
                ("account_number", models.CharField(max_length=64)),
                (
                    "account_type",
                    models.CharField(
                        choices=[
                            ("cheque", "Cheque"),
                            ("savings", "Savings"),
                            ("transmission", "Transmission"),
                        ],
                        max_length=32,
                    ),
                ),
                ("accepted", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=False)),
                ("signature", models.ImageField(null=True, upload_to="signatures/")),
                ("pdf_glacier_id", models.CharField(max_length=256, null=True)),
                ("state", models.CharField(max_length=256, null=True)),
                ("rejected_reason", models.CharField(max_length=256, null=True)),
                (
                    "agreement_reference_number",
                    models.CharField(blank=True, max_length=256, null=True),
                ),
                ("request_identifier", models.TextField(null=True)),
                (
                    "attachment",
                    models.FileField(null=True, upload_to="debit_order_attachments/"),
                ),
                ("branch_name", models.CharField(max_length=255, null=True)),
                ("account_name", models.CharField(max_length=255, null=True)),
                (
                    "date",
                    models.IntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(limit_value=1),
                            django.core.validators.MaxValueValidator(limit_value=31),
                        ],
                    ),
                ),
                (
                    "bank",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="payments.bank"
                    ),
                ),
                (
                    "change_user_identifier",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "policy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="policies.policy",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
